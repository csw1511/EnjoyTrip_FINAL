<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.ssafy.member.model.mapper.MemberMapper">
	<resultMap type="memberDto" id="member">
		<result column="user_id" property="userId"/>
		<result column="user_password" property="userPassword"/>
		<result column="user_name" property="userName"/>
		<result column="user_nickname" property="userNickname"/>
		<result column="user_email" property="userEmail"/>
		<result column="user_grade" property="userGrade"/>
		<result column="token" property="refreshToken"/>
	</resultMap>	
	
	<!-- 회원가입 -->
	<insert id="joinMember" parameterType="memberDto">
		insert into members (user_id, user_password, user_name, user_nickname, user_email, join_date)
		values (#{userId}, #{userPassword}, #{userName}, #{userNickname}, #{userEmail}, now())
	</insert>
	
	<!-- 로그인 -->
	<select id="loginMember" parameterType="loginDto" resultMap="member">
		select user_id, user_password, user_name, user_nickname, user_email, token
		from members
		where user_id = #{userId}
	</select>
	<!-- and user_password = #{userPassword} -->
	
	<!-- 아이디 중복 확인 -->
	<select id="idCheck" parameterType="String" resultType="int">
		select count(user_id)
		from members
		where user_id = #{userId}
	</select>
	
	<!-- 비밀번호 찾기 
	<select id="findPwd" parameterType="map" resultType="int">
		select count(user_id)
		from members
		where user_id=#{userId} and user_name=#{userName}
	</select>
	
	-->
	
	<!-- 회원정보 수정  -->
	<update id="modifyMember" parameterType="memberDto">
		update members
		set user_name = #{userName}, user_Nickname = #{userNickname}, user_email = #{userEmail}
		where user_id = #{userId}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="modifyMemberPw" parameterType="memberModifyPwDto">
		update members
		set user_password = #{userPasswordNew}
		where user_id = #{userId};
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="deleteMember" parameterType="String">
		delete from members
		where user_id = #{userId}
	</delete>
	
	<!-- refresh token 저장 -->
	<update id="saveRefreshToken" parameterType="map">
		update members
		set token = #{token}
		where user_id = #{userId}
	</update>
	
	<!-- refresh token 얻기 -->
	<select id="getRefreshToken" parameterType="String" resultType="string">
		select token
		from members
		where user_id = #{userId}
	</select>
	
	<!-- refresh token 삭제 -->
	<update id="deleteRefreshToken" parameterType="map">
		update members
		set token = #{token, jdbcType=VARCHAR}
		where user_id = #{userId}
	</update>
	
	<!-- 사용자 정보 가져오기 -->
	<select id="userInfo" parameterType="String" resultMap="member">
		select user_id, user_name, user_nickname, user_email, join_date
		from members
		where user_id = #{userId};
	</select>
	
	
</mapper>
